// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  phone    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address      Address?
  orders       Order[]
  shoppingCart ShoppingCart[]
  reviews      Review[]
}

model Address {
  id String @id @default(uuid())

  name        String
  fullAddress String @db.Text
  city        String
  state       String
  zip         String
  country     String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@unique([userId])
}

model Category {
  id String @id @default(uuid())

  name        String
  description String @db.Text

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id   String @id @default(uuid())
  name String

  description String  @db.Text
  price       Int
  stock       Int
  image       String? @db.Text

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
  reviews    Review[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ShoppingCartItem ShoppingCartItem[]
  coupons          Coupon[]
}

enum OrderType {
  FAILED
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

model Order {
  id String @id @default(uuid())

  status    OrderType @default(PENDING)
  total     Int
  addressId String
  shipping  Address   @relation(fields: [addressId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  checkoutSessionId String @unique

  orderItems OrderItem[]
  payment    Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id String @id @default(uuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity   Int
  price      Int
  totalPrice Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShoppingCart {
  id String @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  shoppingCartItems ShoppingCartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShoppingCartItem {
  id String @id @default(uuid())

  shoppingCartId String
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(uuid())

  amount Int

  payment       String
  paymentStatus String

  checkoutSessionId String

  order Order @relation(fields: [checkoutSessionId], references: [checkoutSessionId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  rating  Int
  comment String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id            String @id @default(uuid())
  code          String
  discountValue Int

  usageLimit Int

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
